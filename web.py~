''' 
2048 vs AI Flask app

author: Sawyer
'''

from flask import Flask
from flask import render_template, redirect, request, jsonify, url_for
from game2048 import *
import time

app = Flask(__name__)

users = 0
selfmodels = {}
selfcontrollers = {}
aimodels = {}
aicontrollers = {}
selfvsmodels = {}
selfvscontrollers = {}
aivsmodels = {}
aivscontrollers = {}

all_possible_tiles = []
for i in range(4):
	for j in range(4):
		all_possible_tiles.append(Tile(i+1, j+1, 2))


def reset_users():
	users = 0
	selfmodels = {}
	selfcontrollers = {}
	aimodels = {}
	aicontrollers = {}
	selfvsmodels = {}
	selfvscontrollers = {}
	aivsmodels = {}
	aivscontrollers = {}

def add_user():
	global users
	global selfmodels
	global selfcontrollers
	global selfcounts
	global aimodels
	global aicontrollers
	global aicounts
	global selfvsmodels
	global selfvscontrollers
	global selfvscounts
	global aivsmodels
	global aivscontrollers
	users+=1
	usernumber = users
	selfmodels[usernumber] = Model()
	selfcontrollers[usernumber] = Controller(selfmodels[usernumber])
	aimodels[usernumber] = Model()
	aicontrollers[usernumber] = AIcontroller(aimodels[usernumber])
	selfvsmodels[usernumber] = Model()
	selfvscontrollers[usernumber] = Controller(selfvsmodels[usernumber])
	aivsmodels[usernumber] = Model()
	aivscontrollers[usernumber] = AIcontroller(aivsmodels[usernumber])

def get_time_interval(starttime):
	return time.time()-starttime

def get_time():
	return time.time()

@app.route('/', methods = ['POST', 'GET'])
def begin():
	add_user()
	return render_template('start.html', user=users)

@app.route('/ai/<user>', methods = ['POST', 'GET'])
def ai(user):
	global users
	user=int(user)
	if user > users:
		return redirect('/')
	user = int(user)
	global aimodels
	return render_template('ai.html', aimodel=aimodels[user], time=time, user=user, all_possible_tiles=all_possible_tiles)

@app.route('/self/<user>', methods = ['POST', 'GET'])
def self(user):
	global users
	user=int(user)
	if user > users:
		return redirect('/')
	return render_template('self.html', model=selfmodels[user], user=user, all_possible_tiles=all_possible_tiles)

@app.route('/selfupdate', methods = ['POST', 'GET'])
def selfupdate():
	global users
	user = request.args.get('user', 0, type=int)
	direction = request.args.get('direction', '')
	direction = str(direction)
	if user > users:
		return redirect('/')
	if direction == 'up':
		selfcontrollers[user].move_up()
	if direction == 'down':
		selfcontrollers[user].move_down()
	if direction == 'right':
		selfcontrollers[user].move_right()
	if direction == 'left':
		selfcontrollers[user].move_left()
	tiles = []
	for tile in selfmodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	return jsonify({'tiles':tiles})

@app.route('/selfreset', methods=['POST', 'GET'])
def selfreset():
	global users
	user = request.args.get('user', 0, type=int)
	if user > users:
		return redirect('/')
	selfmodels[user] = Model()
	selfcontrollers[user] = Controller(selfmodels[user])
	tiles = []
	for tile in selfmodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	return jsonify({'tiles':tiles})

@app.route('/aiupdate', methods=['POST', 'GET'])
def aiupdate():
	global users
	user = request.args.get('user', 0, type=int)
	if user > users:
		return redirect('/')
	aicontrollers[user].move()
	tiles = []
	for tile in aimodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	return jsonify({'tiles':tiles})

@app.route('/aireset', methods=['POST', 'GET'])
def aireset():
	global users
	user = request.args.get('user', 0, type=int)
	if user > users:
		return redirect('/')
	aimodels[user] = Model()
	aicontrollers[user] = AIcontroller(aimodels[user])
	tiles = []
	for tile in aimodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	return jsonify({'tiles':tiles})

@app.route('/vsreset', methods=['POST', 'GET'])
def vsreset():
	global users
	user = request.args.get('user', 0, type=int)
	if user > users:
		return redirect('/')
	aivsmodels[user] = Model()
	aivscontrollers[user] = AIcontroller(aivsmodels[user])
	selfvsmodels[user] = Model()
	selfvscontrollers[user] = Controller(selfvsmodels[user])
	tiles = []
	for tile in selfvsmodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	aitiles = []
	for tile in aivsmodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		aitiles.append(tempdict)
	return jsonify({'user':{'tiles':tiles}, 'ai':{'tiles':aitiles}})

@app.route('/vsupdate', methods=['POST', 'GET'])
def vsupdate():
	global users
	user = request.args.get('user', 0, type=int)
	direction = str(request.args.get('direction', ''))
	if user > users:
		return redirect('/')
	if direction == 'ai':
		aivscontrollers[user].move()
		tiles = []
		for tile in aivsmodels[user].tiles:
			tempdict = {}
			tempdict['row'] = tile.row
			tempdict['column'] = tile.column
			tempdict['tilevalue'] = tile.value
			tiles.append(tempdict)
		return jsonify({'tiles':tiles})
	if direction == 'up':
		selfvscontrollers[user].move_up()
	if direction == 'down':
		selfvscontrollers[user].move_down()
	if direction == 'right':
		selfvscontrollers[user].move_right()
	if direction == 'left':
		selfvscontrollers[user].move_left()
	tiles = []
	for tile in selfvsmodels[user].tiles:
		tempdict = {}
		tempdict['row'] = tile.row
		tempdict['column'] = tile.column
		tempdict['tilevalue'] = tile.value
		tiles.append(tempdict)
	return jsonify({'tiles':tiles})

@app.route('/vs_ai/<user>', methods = ['POST', 'GET'])
def vsai(user):
	global users
	user=int(user)
	if user > users:
		return redirect('/')
	return render_template('vs_ai.html', model=selfvsmodels[user], aimodel=aivsmodels[user], user=user, all_possible_tiles=all_possible_tiles)

@app.route('/about/<user>', methods=['POST', 'GET'])
def about(user):
	return render_template('about.html', user=user)

@app.route('/set_speed')
def set_speed():
	speed = str(request.args.get('speed', ''))
	user = request.args.get('user', 0, type=int)
	speeds = {'superslow':2000, 'slow':1500, 'mid':1000, 'fast':750, 'superfast':250}
	return jsonify({'speed':speeds[speed]})

if __name__ == '__main__':
	app.run()
	app.add_url_rule('/favicon.ico', redirect_to=url_for('static', filename='favicon.ico'))
